syntax = "proto3";

package gods.eye.server.artificial.intelligence.messaging;

/**
 *  This facial recognition and analysis server
 *  Contains methods for facial recognition and analysis server
 */
service FacialRecognitionAndAnalysis {
  /**
   * This represents the method that handles the facial recognition
   * As input it takes an instance of SearchForPersonRequest
   * As output returns an instance of SearchForPersonRequest
   */
  rpc DoFacialRecognition(SearchForPersonRequest) returns (SearchForPersonResponse){}

  /**
   * This represents the method that handles the facial attribute analysis
   * As input it takes an instance of FacialAttributeAnalysisRequest
   * As output returns an instance of FacialAttributeAnalysisResponse
   */
  rpc DoFacialAttributeAnalysis(FacialAttributeAnalysisRequest) returns (FacialAttributeAnalysisResponse){}
}

/**
	* This request it is used for creating a search person request
	* The person_image_b64 represents the image with the face of the searched person
	* The location_image_b64 represents the image in which the person is searched
	* If include_cropped_faces_in_response is true then the response will also contain the cropped face/faces
 */
message SearchForPersonRequest {
  string person_image_b64 = 1;
  string location_image_b64 = 2;
  bool include_cropped_faces_in_response = 3;
}

/**
	* This request is used for facial attribute analysis
	* The face_bounding_box represents the coordinates of the analysed face in the given image
	* The analyzed_image_containing_the_face_b64 represents the image in which the face is present
	* If the face is unknown then you should set is_face_location_known = true and it will be detected automatically
 */
message FacialAttributeAnalysisRequest {
  FaceLocationBoundingBox face_bounding_box = 1;
  string analyzed_image_containing_the_face_b64 = 2;
  bool is_face_location_known = 3;
}

/**
  * This represents the response of the SearchForPersonRequest
  * The is_search is true only when the person is recognised in the image
  * The face_recognition_info contain the coordinates of the face
      * the top left and right corners and bottom left and right corners
      * and also based on the value from the request (include_cropped_faces_in_response) the detected face/s will be added
 */
message SearchForPersonResponse {
  bool is_found = 1;
  repeated FaceRecognitionInformation face_recognition_info = 2;
}

/**
  * The face recognition information including the face location and the face if specified
 */
message FaceRecognitionInformation {
  FaceLocationBoundingBox face_bounding_box = 1;
  string cropped_face_image_b64 = 2;
}

/**
 *  The coordinates of the bounding box around a face
 */
message FaceLocationBoundingBox {
  int32 top_x = 1;
  int32 top_y = 2;
  int32 bottom_x = 3;
  int32 bottom_y = 4;
}

/**
  * This represents the response of the facial analysis request
  * Each field is populated with the right value
 */
 message FacialAttributeAnalysisResponse {
  string emotion = 1;
  string race = 2;
  int32 age = 3;
  string gender = 4;
}

